from __future__ import annotations
from PySide6.QtWidgets import QLabel, QVBoxLayout, QTextEdit, QPushButton, QProgressBar, QHBoxLayout
from PySide6.QtCore import Qt, QThread, Signal
from pathlib import Path

from ocr_medical.ui.pages.base_page import BasePage
from ocr_medical.ui.style.theme_manager import ThemeManager
from ocr_medical.core.pipeline import process_input
from ocr_medical.core.status import status_manager


class ExtraInfoPage(BasePage):
    """
    Trang x·ª≠ l√Ω OCR v√† tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√°c file ƒë·∫ßu v√†o.
    Hi·ªÉn th·ªã ti·∫øn tr√¨nh, log v√† cung c·∫•p n√∫t ƒëi·ªÅu h∆∞·ªõng.
    """
    # Signal ƒë·ªÉ c·∫≠p nh·∫≠t log v√† progress bar t·ª´ thread
    log_update = Signal(str)
    progress_update = Signal(int)

    def __init__(self, theme_manager: ThemeManager, parent=None) -> None:
        super().__init__("Extract Info", theme_manager, parent)
        layout = self.layout()

        # --- Ti√™u ƒë·ªÅ ph·ª•: hi·ªÉn th·ªã tr·∫°ng th√°i ---
        self.info_label = QLabel("Waiting for input files...")
        self.info_label.setAlignment(Qt.AlignLeft)
        layout.addWidget(self.info_label)

        # --- Thanh ti·∫øn tr√¨nh ---
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        layout.addWidget(self.progress_bar)

        # --- Log box: hi·ªÉn th·ªã chi ti·∫øt qu√° tr√¨nh x·ª≠ l√Ω ---
        self.log_box = QTextEdit()
        self.log_box.setReadOnly(True)  # Ch·ªâ ƒë·ªçc, kh√¥ng cho ch·ªânh s·ª≠a
        layout.addWidget(self.log_box, stretch=1)

        # --- N√∫t ƒëi·ªÅu khi·ªÉn ---
        btn_layout = QHBoxLayout()
        
        # N√∫t quay l·∫°i trang Home
        self.back_btn = QPushButton("‚Üê Back")
        self.back_btn.clicked.connect(self._go_back)
        
        # N√∫t m·ªü th∆∞ m·ª•c output
        self.save_btn = QPushButton("Open Output Folder")
        
        btn_layout.addWidget(self.back_btn)
        btn_layout.addStretch(1)  # ƒê·∫©y n√∫t save sang ph·∫£i
        btn_layout.addWidget(self.save_btn)
        layout.addLayout(btn_layout)

        # --- Connect signal n·ªôi b·ªô ƒë·ªÉ c·∫≠p nh·∫≠t UI t·ª´ thread ---
        self.log_update.connect(self._append_log)
        self.progress_update.connect(self._set_progress)

        layout.addStretch(1)

    def load_files(self, files: list[Path]):
        """
        Nh·∫≠n danh s√°ch file t·ª´ HomePage v√† b·∫Øt ƒë·∫ßu x·ª≠ l√Ω pipeline.
        Ch·∫°y trong thread ri√™ng ƒë·ªÉ kh√¥ng l√†m ƒë∆° UI.
        """
        if not files:
            self.info_label.setText("‚ö†Ô∏è No files provided.")
            return

        # Reset UI
        self.log_box.clear()
        self.info_label.setText(f"Processing {len(files)} file(s)...")
        self.progress_bar.setValue(0)

        # T·∫°o v√† ch·∫°y thread pipeline
        self.thread = PipelineThread(files)
        self.thread.log_update.connect(self.log_update.emit)
        self.thread.progress_update.connect(self.progress_update.emit)
        self.thread.finished.connect(self._on_finished)
        self.thread.start()

    def _append_log(self, msg: str):
        """Th√™m d√≤ng log v√†o log box"""
        self.log_box.append(msg)

    def _set_progress(self, value: int):
        """C·∫≠p nh·∫≠t gi√° tr·ªã thanh ti·∫øn tr√¨nh"""
        self.progress_bar.setValue(value)

    def _on_finished(self):
        """Callback khi pipeline ho√†n th√†nh"""
        self.info_label.setText("‚úÖ Done! Results saved to data/output/")
        self.progress_bar.setValue(100)

    def _go_back(self):
        """Quay v·ªÅ trang Home"""
        from ui.main_window import MainWindow
        main = self.window()
        if isinstance(main, MainWindow):
            main.navigate_to("home")


class PipelineThread(QThread):
    """
    Thread ch·∫°y pipeline OCR ƒë·ªÉ kh√¥ng ch·∫∑n giao di·ªán.
    Emit signal ƒë·ªÉ c·∫≠p nh·∫≠t progress v√† log.
    """
    log_update = Signal(str)
    progress_update = Signal(int)
    finished = Signal()

    def __init__(self, files: list[Path]):
        super().__init__()
        self.files = files

    def run(self):
        """X·ª≠ l√Ω t·ª´ng file trong danh s√°ch"""
        total = len(self.files)
        
        for i, file in enumerate(self.files, start=1):
            # Log file ƒëang x·ª≠ l√Ω
            self.log_update.emit(f"üîπ [{i}/{total}] ƒêang x·ª≠ l√Ω: {file.name}")

            try:
                # G·ªçi pipeline th·ª±c t·∫ø
                status_manager.reset()
                process_input(str(file))
                
                # Emit t·∫•t c·∫£ log t·ª´ status_manager
                for log in status_manager.logs:
                    self.log_update.emit(f"   {log}")

            except Exception as e:
                # Log l·ªói n·∫øu c√≥
                self.log_update.emit(f"‚ùå L·ªói khi x·ª≠ l√Ω {file.name}: {e}")

            # C·∫≠p nh·∫≠t progress bar
            percent = int(i / total * 100)
            self.progress_update.emit(percent)

        # B√°o hi·ªáu ho√†n th√†nh
        self.finished.emit()