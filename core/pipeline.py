from pathlib import Path
from urllib.parse import urlparse
from io import BytesIO
import requests
import json
from PIL import Image
from PySide6.QtCore import QStandardPaths

from core.waifu2x_loader import load_waifu2x
from core.process_image import process_image
from core.ocr_extract import call_qwen_ocr
from core.status import status_manager
from utils.path_helper import resource_path

# ============================================================
# üìÅ Project root (ƒë∆∞·ª£c d√πng khi fallback)
# ============================================================
PROJECT_ROOT = Path(__file__).resolve().parent.parent

# ============================================================
# üß† Prompt m·∫∑c ƒë·ªãnh cho OCR
# ============================================================
DEFAULT_PROMPT = (
    "H√£y tr√≠ch xu·∫•t to√†n b·ªô n·ªôi dung vƒÉn b·∫£n c√≥ trong ·∫£nh, bao g·ªìm c·∫£ ch·ªØ, s·ªë, k√Ω hi·ªáu ƒë·∫∑c bi·ªát "
    "v√† c√°c c·∫•u tr√∫c b·∫£ng n·∫øu c√≥. "
    "Y√™u c·∫ßu tr√¨nh b√†y k·∫øt qu·∫£ nh∆∞ sau:\n"
    "1. N·∫øu ·∫£nh ch·ª©a b·∫£ng d·ªØ li·ªáu:\n"
    "   - Tr√¨nh b√†y l·∫°i d∆∞·ªõi d·∫°ng **b·∫£ng Markdown** v·ªõi ƒë·ªãnh d·∫°ng r√µ r√†ng.\n"
    "   - H√†ng ti√™u ƒë·ªÅ in ƒë·∫≠m.\n"
    "   - C√°c c·ªôt cƒÉn ch·ªânh b·∫±ng d·∫•u | v√† kho·∫£ng tr·∫Øng ƒë·ªÅu.\n"
    "   - C√°c m·ª•c quan tr·ªçng (v√≠ d·ª•: MI·ªÑN D·ªäCH, PXN VI SINH) ph·∫£i in ƒë·∫≠m.\n"
    "   - Gi·ªØ nguy√™n k√Ω hi·ªáu ƒë·∫∑c bi·ªát (v√≠ d·ª• d·∫•u * ph·∫£i hi·ªÉn th·ªã l√† \\*).\n"
    "   - Gi√° tr·ªã s·ªë v√† ƒë∆°n v·ªã gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng g·ªëc.\n"
    "2. N·∫øu ·∫£nh **kh√¥ng ch·ª©a b·∫£ng** m√† ch·ªâ c√≥ ƒëo·∫°n vƒÉn, ch·ªØ vi·∫øt ho·∫∑c k√Ω t·ª± r·ªùi:\n"
    "   - H√£y tr√≠ch xu·∫•t to√†n b·ªô vƒÉn b·∫£n ƒë√∫ng theo th·ª© t·ª± hi·ªÉn th·ªã t·ª´ tr√™n xu·ªëng d∆∞·ªõi, tr√°i sang ph·∫£i.\n"
    "   - Gi·ªØ nguy√™n ng·∫Øt d√≤ng, d·∫•u c√¢u v√† k√Ω hi·ªáu ƒë·∫∑c bi·ªát.\n"
    "   - Kh√¥ng th√™m l·ªùi gi·∫£i th√≠ch hay ƒë·ªãnh d·∫°ng Markdown.\n"
    "K·∫øt qu·∫£ ch·ªâ bao g·ªìm ph·∫ßn n·ªôi dung ƒë√£ tr√≠ch xu·∫•t, kh√¥ng th√™m m√¥ t·∫£ ho·∫∑c ph√¢n t√≠ch."
)


# ============================================================
# üì¶ L·∫•y th∆∞ m·ª•c output m·∫∑c ƒë·ªãnh t·ª´ config
# ============================================================
def get_default_output() -> Path:
    """
    Load default output directory t·ª´ config file.
    N·∫øu kh√¥ng c√≥ th√¨ d√πng AppData ho·∫∑c fallback v·ªÅ project/data/output.
    """
    try:
        # üîß CH·ªàNH L·∫†I ƒê∆Ø·ªúNG D·∫™N CHO ƒê√öNG
        config_path = resource_path("config/app_config.json")

        if config_path.exists():
            with open(config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
                storage_dir_str = config.get("storage_path", "")

                if storage_dir_str and storage_dir_str.strip():
                    storage_path = Path(storage_dir_str)
                    storage_path.mkdir(parents=True, exist_ok=True)
                    return storage_path

        # N·∫øu kh√¥ng c√≥ config ho·∫∑c storage_path tr·ªëng ‚Üí AppData
        app_data = QStandardPaths.writableLocation(QStandardPaths.AppDataLocation)
        default_path = Path(app_data) / "OCR-Medical" / "output"
        default_path.mkdir(parents=True, exist_ok=True)
        return default_path

    except Exception as e:
        # N·∫øu l·ªói, fallback v·ªÅ th∆∞ m·ª•c d·ª± √°n
        status_manager.add(f"‚ö†Ô∏è L·ªói load storage path: {e}")
        fallback_path = PROJECT_ROOT / "data" / "output"
        fallback_path.mkdir(parents=True, exist_ok=True)
        return fallback_path


# üóÇÔ∏è Output m·∫∑c ƒë·ªãnh
DEFAULT_OUTPUT = get_default_output()


# ============================================================
# ‚úèÔ∏è G·ªçi OCR v√† l∆∞u k·∫øt qu·∫£ Markdown
# ============================================================
def save_text(processed_path: Path, img_name: str, output_root: Path):
    """
    G·ªçi OCR v√† l∆∞u k·∫øt qu·∫£ Markdown.
    """
    try:
        out_dir_text = output_root / img_name / "text"
        out_dir_text.mkdir(parents=True, exist_ok=True)

        extracted = call_qwen_ocr(str(processed_path), DEFAULT_PROMPT)
        ocr_path = out_dir_text / f"{img_name}_processed.md"
        with open(ocr_path, "w", encoding="utf-8") as f:
            f.write(extracted)

        status_manager.add(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ OCR: {ocr_path.name}")
    except Exception as e:
        status_manager.add(f"‚ùå L·ªói l∆∞u OCR: {e}")
        raise


# ============================================================
# üîÑ Pipeline ch√≠nh
# ============================================================
def process_input(input_path: str, output_root: str = None):
    """
    Pipeline OCR:
    - Input: file ·∫£nh, folder, ho·∫∑c URL
    - Output: original, processed, text (.md)
    """
    status_manager.reset()
    output_root = Path(output_root) if output_root else DEFAULT_OUTPUT
    upscaler = load_waifu2x()

    try:
        # N·∫øu l√† URL
        if input_path.startswith(("http://", "https://")):
            response = requests.get(input_path)
            response.raise_for_status()
            img = Image.open(BytesIO(response.content)).convert("RGB")
            img_name = Path(urlparse(input_path).path).stem
            _, proc_path = process_image(upscaler, img, img_name, output_root)
            save_text(proc_path, img_name, output_root)
            return status_manager

        # N·∫øu l√† file ·∫£nh
        p = Path(input_path)
        if p.is_file():
            img = Image.open(p).convert("RGB")
            img_name = p.stem
            _, proc_path = process_image(upscaler, img, img_name, output_root)
            save_text(proc_path, img_name, output_root)

        # N·∫øu l√† th∆∞ m·ª•c
        elif p.is_dir():
            for file in p.glob("*.*"):
                if file.suffix.lower() in [".png", ".jpg", ".jpeg", ".webp"]:
                    img = Image.open(file).convert("RGB")
                    img_name = file.stem
                    _, proc_path = process_image(upscaler, img, img_name, output_root)
                    save_text(proc_path, img_name, output_root)
        else:
            status_manager.add(f"‚ùå Input kh√¥ng t·ªìn t·∫°i: {input_path}")
            raise FileNotFoundError(f"Input {input_path} kh√¥ng t·ªìn t·∫°i")

        return status_manager

    except Exception as e:
        status_manager.add(f"‚ùå Pipeline error: {e}")
        raise
